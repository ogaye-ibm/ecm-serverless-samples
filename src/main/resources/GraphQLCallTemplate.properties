# GraphQL API call schema definition. These calls are used by the Content Event
# Webhook Receiver sample to setup the Webhook or callback to the Content
# Services to handle the document that triggered the Webhook subscription.

# Query for pinging the Content Services server. Parameters are bound to this
#  string in the following order:
#   -Name or GUID of the object store
PING_CONTENTSERVICE_SERVER = \
{\
  _apiInfo(repositoryIdentifier: "%s") { \
    buildDate \
    buildNumber \
    implementationVersion \
    implementationTitle \
    productVersion \
    cpeInfo { \
      cpeURL \
      cpeUser \
      repositoryName \
    } \
  } \
}

# Mutation for creating Webhook external event action and subscription.
# Parameters are bound to this string in the following order:
#   -Name or GUID of the object store
#   -Webhook external event action name
#   -Webhook external event action description
#   -Webhook secret
#   -Webhook Receiver URL
#   -Webhook Receiver Registration Identifier
#   -Webhook external event subscription name
#   -Webhook external event subscription description
CREATE_EVENTACTION_WITH_CLASSSUBSCRIPTION = \
mutation \
{ \
  eevCreateExternalEventAction( \
    repositoryIdentifier:"%s" \
    externalEventActionProperties: \
    { \
      type:WEBHOOK \
      name:"%s" \
      descriptiveText: "%s" \
      cmTransactionTimeout: 60 \
      eevEventReceiverCredentials: \
      { \
        credentialType:HMAC \
        credentialSecret:"%s" \
      } \
      eevExternalEventReceiverURL:"%s" \
      eevReceiverRegistrationIdentifier: "%s" \
    } \
    subscriptions: \
    { \
      changes: [ \
        { \
          type: CLASS \
          changeMode:ADD \
          name:"%s" \
          descriptiveText: "%s" \
          subscriptionTarget: \
          { \
            classIdentifier:"ClassDefinition" \
            identifier:"WebhookClaim" \
          } \
          subscribedEventClassIdentifiers: \
          [ \
            "CreationEvent" \
          ] \
          subExternalEventClassSubscription: \
          { \
            includeSubclasses: true \
          } \
        } \
      ] \
    } \
  ) \
  { \
    id \
    name \
    owner \
    progId \
    eevExternalEventReceiverURL \
    isEnabled \
    cmTransactionTimeout \
  } \
}

# Query for retreiving the Webhook external event action and associated
# subscriptions. Parameters are bound to this string in the following order:
#   -Name or GUID of the object store
#   -GUID of the external event action
FETCH_EVENTACTION_WITH_CLASSSUBSCRIPTION = \
{ \
  eevExternalEventAction( \
    repositoryIdentifier: "%s" \
    identifier: "%s" \
  ) \
  { \
    id \
    name \
    owner \
    progId \
    eevExternalEventReceiverURL \
    isEnabled \
    cmTransactionTimeout \
    subscriptions { \
      subscriptions { \
        id \
        name \
        isEnabled \
        isSynchronous \
        subscribedEvents { \
          eventClass { \
            className \
            symbolicName \
          } \
        } \
      } \
    } \
  } \
}



# Mutation for updating an existing Webhook external event action and
# subscription. Parameters are bound to this string in the following order:
#   -Name or GUID of the object store
#   -GUID of the external event action
#   -New Webhook external event action name
#   -New Webhook external event subscription name
#   -New Webhook external event subscription description
#   -Webhook external event subscription GUID
UPDATE_EVENTACTION_WITH_CLASSSUBSCRIPTION = \
mutation \
{ \
  eevUpdateExternalEventAction( \
    repositoryIdentifier: "%s" \
    identifier: "%s" \
    externalEventActionProperties: \
    { \
      type: WEBHOOK \
      name: "%s" \
      isEnabled: true \
      cmTransactionTimeout: 120 \
    } \
    subscriptions: \
    { \
      changes: [ \
        { \
          type: CLASS \
          changeMode: UPDATE \
          name: "%s" \
          descriptiveText: "%s" \
          id: "%s" \
          subscribedEventClassIdentifiers: \
          [ \
            "UpdateEvent" \
          ] \
        } \
      ] \
    } \
  ) \
  { \
    id \
    name \
    owner \
    progId \
    eevExternalEventReceiverURL \
    isEnabled \
    cmTransactionTimeout \
  } \
}

# Query for retrieving a document. Parameters are bound to this string in the
# following order:
#   -Name or GUID of the object store
#   -GUID of the document to fetch
GET_DOCUMENT = \
{ \
  document( \
    repositoryIdentifier: "%s" \
    identifier: "%s" \
  ) \
  { \
    className \
    id \
    name \
    mimeType \
    creator \
    dateCreated \
    isReserved \
    reservation { \
      id \
      creator \
    } \
    accessAllowed \
    contentElements { \
      elementSequenceNumber \
      ... on ContentTransfer { \
        retrievalName \
        downloadUrl \
      } \
    } \
    properties(includes: ["DocumentTitle", "FoldersFiledIn", "WebhookDollarAmount", "WebhookPriority", "WebhookRiskFactor"]) { \
      id \
      label \
      type \
      cardinality \
      value \
      ... on EnumProperty { \
        independentObjectSetValue { \
          independentObjects { \
            className \
            properties(includes: ["PathName"]) { \
              id \
              label \
              type \
              cardinality \
              value \
            } \
          } \
          pageInfo { \
            token \
          } \
        } \
      } \
    } \
  } \
}


# Mutation for updating a document. Parameters are bound to this string in the
# following order:
#   -Name or GUID of the object store
#   -GUID of the document to modify
#   -Array of properties to modify
UPDATE_DOCUMENT = \
mutation { \
  updateDocument( \
    repositoryIdentifier: "%s" \
    identifier: "%s" \
    classIdentifier: "WebhookClaim" \
    documentProperties: \
    { \
      properties: %s \
    } \
  ) \
  { \
    className \
    id \
    name \
    mimeType \
    creator \
    dateCreated \
    isReserved \
    reservation { \
      id \
      creator \
    } \
    accessAllowed \
    contentElements { \
      elementSequenceNumber \
      ... on ContentTransfer { \
        retrievalName \
        downloadUrl \
      } \
    } \
    properties(includes: ["DocumentTitle", "FoldersFiledIn", "WebhookDollarAmount", "WebhookPriority", "WebhookRiskFactor"]) { \
      id \
      label \
      type \
      cardinality \
      value \
      ... on EnumProperty { \
        independentObjectSetValue { \
          independentObjects { \
            className \
            properties(includes: ["PathName"]) { \
              id \
              label \
              type \
              cardinality \
              value \
            } \
          } \
          pageInfo { \
            token \
          } \
        } \
      } \
    } \
  } \
}

# Mutation for deleting a document. Parameters are bound to this string in the
# following order:
#   -Name or GUID of the object store
#   -GUID of the document to delete
DELETE_DOCUMENT = \
mutation { \
  deleteDocument( \
    repositoryIdentifier: "%s" \
    identifier: "%s" \
  ) \
  { \
    className \
    id \
  } \
}



# Mutation for deleting existing Webhook external event action and associated
# subscriptions. This mutation is a batch of two different mutations. Parameters
# are bound to this string in the following order:
#   -Name or GUID of the object store
#   -GUID of the external event action to delete
#   -List of subscription GUIDs to delete, each wrapped in double quotes
#   -Name or GUID of the object store (second mutation)
#   -GUID of the external event action to delete (second mutation)
DELETE_EVENTACTION_SUBSCRIPTIONS = \
mutation \
{ \
  eevUpdateExternalEventAction( \
    repositoryIdentifier: "%s" \
    identifier: "%s" \
    subscriptions: \
    { \
      deletions: [ \
        %s \
      ] \
    } \
  ) \
  { \
    id \
    name \
    owner \
    progId \
    eevExternalEventReceiverURL \
    isEnabled \
    cmTransactionTimeout \
  } \
  eevDeleteExternalEventAction( \
    repositoryIdentifier: "%s" \
    identifier: "%s" \
  ) \
  { \
    id \
    objectReference { \
      repositoryIdentifier \
      classIdentifier \
      identifier \
    } \
  } \
}


